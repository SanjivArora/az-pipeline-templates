parameters:
- name: compliance
  type: string
  default: 'enabled'  
- name: env
  type: string
- name: workingDirectory
  type: string
- name: adoServiceConnectionName
  type: string
- name: backendAzureRmResourceGroupName
  type: string
- name: backendAzureRmStorageAccountName
  type: string
- name: backendAzureRmContainerName
  type: string
- name: backendAzureRmKey
  type: string
- name: tfvarsFileName
  type: string
- name: networkZone
  type: string

stages:
  - stage: plan
    displayName: "Plan and Generate Artifact"
    jobs:
      - job: plan 
        displayName: Plan
        steps:
          - template: tasks/terraform-tasks-plan.yaml
            parameters:
              workingDirectory: '${{ parameters.workingDirectory }}'
              adoServiceConnectionName: '${{ parameters.adoServiceConnectionName }}'
              backendAzureRmResourceGroupName: '${{ parameters.backendAzureRmResourceGroupName }}'
              backendAzureRmStorageAccountName: '${{ parameters.backendAzureRmStorageAccountName }}'
              backendAzureRmContainerName: '${{ parameters.backendAzureRmContainerName }}'
              backendAzureRmKey: '${{ parameters.backendAzureRmKey }}'
              tfvarsFileName: '${{ parameters.tfvarsFileName }}'

  - stage: compliance
    condition: ne('${{ parameters.compliance }}', 'disabled')
    dependsOn: plan
    displayName: 'Static Code Analysis Stage'
    jobs:
      - job: ScanningCodes
        displayName: 'Run Checkov'
        steps:
          - template: tasks/terraform-tasks-compliance.yaml
            parameters:
              workingDirectory: '${{ parameters.workingDirectory }}'

  - stage: deploy
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))

    dependsOn: 
      - plan
      - compliance
    displayName: Deploy
    jobs:
      - deployment: apply
        timeoutInMinutes: 300
        environment: $(System.TeamProject)-${{ parameters.env }}
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/terraform-tasks-apply.yaml
                  parameters:
                    workingDirectory: '${{ parameters.workingDirectory }}'
                    adoServiceConnectionName: '${{ parameters.adoServiceConnectionName }}'
                    backendAzureRmResourceGroupName: '${{ parameters.backendAzureRmResourceGroupName }}'
                    backendAzureRmStorageAccountName: '${{ parameters.backendAzureRmStorageAccountName }}'
                    backendAzureRmContainerName: '${{ parameters.backendAzureRmContainerName }}'
                    backendAzureRmKey: '${{ parameters.backendAzureRmKey }}'
                    tfvarsFileName: '${{ parameters.tfvarsFileName }}'
